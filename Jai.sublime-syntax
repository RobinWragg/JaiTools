%YAML 1.2
---

# http://www.sublimetext.com/docs/3/syntax.html

# TODO: Jai's tags to be scoped as meta.annotation. I believe they begin with @.
# TODO: Bitwise operators

name: Jai
file_extensions:
  - jai

scope: source.jai

contexts:
  main:
    - include: common
    - match: '{'
      push: block
  
  block:
    - include: common
    - meta_scope: meta.block.jai
    - match: '{'
      push: block
    - match: '}'
      pop: true

  common:
    - include: comment

    # Herestring literals.
    # NOTE: Must have priority over general preprocessor rule.
    - match: (#)(string) (.*)$
      captures:
        1: punctuation.preprocessor.jai, meta.preprocessor.jai
        2: meta.preprocessor.jai
        3: constant.other.stringdelimiter.jai
      scope:
      embed: herestring-content
      escape: ^(\3)$
      escape_captures:
        1: constant.other.stringdelimiter.jai
    - match: '(#)(\w+?)\b'
      captures:
        1: punctuation.preprocessor.jai, meta.preprocessor.jai
        2: meta.preprocessor.jai

    # Function definition with line ending before )
    - match: '\b\w+(?=\s*:\s*[:=]\s*\(\s*\w+:)'
      scope: entity.name.function.jai
      push: function-def
    # Function definition with line ending immediately after (
    - match: '\b\w+(?=\s*:\s*[:=]\s*\(\s*$)'
      scope: entity.name.function.jai
      push: function-def
    # Full, one-line function definition
    - match: '\b\w+(?=\s*:\s*[:=]\s*\([^)]*?\)\s*(?:{|->))'
      scope: entity.name.function.jai
      push: function-def
    - match: '\b\w+(?=\s*:\s*[:=]\s*struct)'
      scope: entity.name.struct.jai
      push: struct-def
    - match: '\b\w+(?=\s*:\s*[:=]\s*enum)'
      scope: entity.name.enum.jai
      push: enum-def
    - match: '\b\w+(?=\s*:.*?(?:[:=].*?)?;)'
      scope: entity.name.variable.jai
      push: variable-def
    - match: '\b(?:return|if|then|else|for|break|continue|it|it_index|struct|using)\b'
      scope: keyword.jai
    - include: storage-type
    - include: expression
    - match: ';'
      scope: punctuation.terminator.jai
  
  herestring-content:
    - meta_scope: string.unquoted.jai

  string-literal:
    - meta_scope: string.quoted.double.jai
    - match: '\\.'
      scope: constant.character.escape.jai
    - match: '%'
      scope: constant.other.placeholder.jai
    - match: '"'
      pop: true
    
  multiline-comment:
    - match: /\*
      push:
        - include: multiline-comment
        - meta_scope: comment.block.jai
        - match: \*/
          pop: true
  
  comment:
    - include: multiline-comment
    - match: //
      push:
        - meta_scope: comment.line.jai
        - match: $
          pop: true
  
  expression:
    - include: comment
    - match: '"'
      push: string-literal
    - match: '\b\w+(?=\()'
      scope: variable.function.jai
    - match: '\b0h[a-fA-F0-9]+'
      scope: constant.numeric.float.hexadecimal.jai
    - match: '\b0x[a-fA-F0-9]+'
      scope: constant.numeric.integer.hexadecimal.jai
    - match: '\b\d+\.\d*'
      scope: constant.numeric.float.decimal.jai
    - match: '\b\d+'
      scope: constant.numeric.integer.decimal.jai
    - match: '\b(?:null|true|false)\b'
      scope: constant.language.jai
    - match: '(?<=\w)\.(?=[a-zA-Z_])'
      scope: punctuation.accessor.jai
    - match: '\['
      scope: punctuation.section.brackets.begin.jai
    - match: '\]'
      scope: punctuation.section.brackets.end.jai
    - match: '>>|<<|[&|]'
      scope: keyword.operator.bitwise.jai
    - match: '[><!]|=='
      scope: keyword.operator.logical.jai
    - match: '[+*/-]'
      scope: keyword.operator.arithmetic.jai
    - match: '\s*:[=:]'
      scope: keyword.operator.assignment.jai
    - match: '(?<=\w)\s*:(?=.*?[:=])'
      scope: keyword.operator.assignment.jai
    - match: ':(?=.+?;)'
      scope: keyword.operator.assignment.jai
    - match: '='
      scope: keyword.operator.assignment.jai
  
  storage-type:
    - match: '\b(?:Any|void|string|bool|float|float32|float64|int|u8|u16|u32|u64|s8|s16|s32|s64)\b'
      scope: storage.type.jai
  
  params:
    - meta_content_scope: meta.function.parameters.jai
    - include: comment
    - include: storage-type
    - match: '\b\w+(?=\s*:)'
      scope: variable.parameter.jai
    - match: ':'
      scope: keyword.other.jai
    - match: ','
      scope: punctuation.separator.jai
    - match: '\)'
      pop: true
    
  function-def:
    - meta_scope: meta.function.jai
    - include: comment
    - match: '::|:='
      scope: keyword.operator.assignment.jai
    - match: '\('
      push: params
    - include: storage-type
    - match: '(?=\s*{)'
      pop: true

  struct-def:
    - meta_scope: meta.struct.jai
    - include: comment
    - match: '::|:='
      scope: keyword.operator.assignment.jai
    - match: '\bstruct\b'
      scope: keyword.jai
    - match: '(?=\s*{)'
      pop: true
  
  enum-def:
    - meta_scope: meta.enum.jai
    - include: comment
    - match: '::|:='
      scope: keyword.operator.assignment.jai
    - match: '\benum\b'
      scope: keyword.jai
    - match: '(?=\s*{)'
      pop: true
  
  variable-def:
    - meta_scope: meta.variable.jai
    - include: comment
    - include: storage-type
    - include: expression
    - match: ':|='
      scope: keyword.operator.assignment.jai
    - match: ';'
      scope: punctuation.terminator.jai
      pop: true






